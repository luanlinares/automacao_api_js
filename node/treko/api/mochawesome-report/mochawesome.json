{
  "stats": {
    "suites": 14,
    "tests": 10,
    "passes": 3,
    "pending": 0,
    "failures": 7,
    "start": "2020-04-27T17:59:22.189Z",
    "end": "2020-04-27T17:59:40.924Z",
    "duration": 18735,
    "testsRegistered": 13,
    "passPercent": 23.076923076923077,
    "pendingPercent": 0,
    "other": 3,
    "hasOther": true,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "520c331b-6b25-4655-8d7a-5b81dc13959c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "79565fcd-d6bd-4dfd-b836-5dd69a866c79",
          "title": "delete",
          "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js",
          "file": "\\test\\delete.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a3109620-351f-48ad-9725-725d9f2b2a0a",
              "title": "quando apago uma tarefa",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js",
              "file": "\\test\\delete.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "delete quando apago uma tarefa \"before all\" hook",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_task2.default.insertMany([task]);\ndone();",
                  "err": {},
                  "uuid": "1c8c972d-e80d-4644-9cb0-81278fb117bf",
                  "parentUUID": "a3109620-351f-48ad-9725-725d9f2b2a0a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook for \"deve retornar 200\"",
                  "fullTitle": "delete quando apago uma tarefa \"after all\" hook for \"deve retornar 200\"",
                  "timedOut": true,
                  "duration": 2001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task/' + task._id).end(function (err, res) {\n    expect(res).to.has.status(404);\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js)",
                    "diff": null
                  },
                  "uuid": "ca99768f-421a-4155-89a0-87d447c1fa97",
                  "parentUUID": "a3109620-351f-48ad-9725-725d9f2b2a0a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "deve retornar 200",
                  "fullTitle": "delete quando apago uma tarefa deve retornar 200",
                  "timedOut": true,
                  "duration": 2002,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "request.delete('/task/' + task._id).end(function (err, res) {\n    expect(res).to.have.status(200);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js)",
                    "diff": null
                  },
                  "uuid": "d4910336-f2da-4375-9950-adb7df625e6f",
                  "parentUUID": "a3109620-351f-48ad-9725-725d9f2b2a0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d4910336-f2da-4375-9950-adb7df625e6f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2002,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "deab8d58-5815-4d26-bf8f-ff115efd1e65",
              "title": "deletar tarefa inexistente",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\delete.spec.js",
              "file": "\\test\\delete.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 404",
                  "fullTitle": "delete deletar tarefa inexistente deve retornar 404",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var id = require('mongoose').Types.ObjectId();\nrequest.delete('/task/' + _task2.default._id).end(function (err, res) {\n    expect(res).to.have.status(404);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {},
                  "uuid": "433b972c-8824-4300-bdda-6b98195eadcc",
                  "parentUUID": "deab8d58-5815-4d26-bf8f-ff115efd1e65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "433b972c-8824-4300-bdda-6b98195eadcc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26c57ba8-7b5b-42f6-b5f7-861da94e79a7",
          "title": "get",
          "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js",
          "file": "\\test\\get.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35f98f3d-830c-41de-baab-eb7bfbc47bee",
              "title": "quando eu tenho tarefas cadastradas",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js",
              "file": "\\test\\get.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "get quando eu tenho tarefas cadastradas \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tasks = [{ title: 'Estudar NodeJs', owner: 'luanlnrs@gmail.com', done: false }, { title: 'Fazer Compras', owner: 'luanlnrs@gmail.com', done: false }, { title: 'Estudar MongoDB', owner: 'luanlnrs@gmail.com', done: true }];\n_task2.default.insertMany(tasks);\ndone();",
                  "err": {},
                  "uuid": "9d0008e9-2538-40ed-9a8a-d6db919b0b6a",
                  "parentUUID": "35f98f3d-830c-41de-baab-eb7bfbc47bee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma lista",
                  "fullTitle": "get quando eu tenho tarefas cadastradas deve retornar uma lista",
                  "timedOut": true,
                  "duration": 2000,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task').end(function (err, res) {\n    expect(res).to.has.status(200);\n    //console.log(typeof res.body.data);\n    expect(res.body.data).to.be.an('array');\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "diff": null
                  },
                  "uuid": "c9196439-36eb-46db-9cdd-e55f51747f96",
                  "parentUUID": "35f98f3d-830c-41de-baab-eb7bfbc47bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve filtrar por palavra chave",
                  "fullTitle": "get quando eu tenho tarefas cadastradas deve filtrar por palavra chave",
                  "timedOut": true,
                  "duration": 2000,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task').query({ title: 'Estudar' }).end(function (err, res) {\n    expect(res).to.has.status(200);\n    expect(res.body.data[0].title).to.equal('Estudar NodeJs');\n    expect(res.body.data[1].title).to.equal('Estudar MongoDB');\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "diff": null
                  },
                  "uuid": "f9b34d05-6005-4427-99d8-c95a90af288b",
                  "parentUUID": "35f98f3d-830c-41de-baab-eb7bfbc47bee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c9196439-36eb-46db-9cdd-e55f51747f96",
                "f9b34d05-6005-4427-99d8-c95a90af288b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4000,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "872b6b91-c09c-42eb-834e-361178033e4b",
              "title": "quando busco por id",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js",
              "file": "\\test\\get.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma única tarefa",
                  "fullTitle": "get quando busco por id deve retornar uma única tarefa",
                  "timedOut": true,
                  "duration": 2001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var tasks = [{ title: 'Ler um livro de javascript', owner: 'luanlnrs@gmail.com', done: false }];\n_task2.default.insertMany(tasks, function (err, result) {\n    var id = result[0]._id;\n    request.get('/task/' + id).end(function (err, res) {\n        expect(res).to.has.status(200);\n        //expect(res.body.data.title).to.equal('Ler um livro de javascript')\n        //Outra forma de validar usando a própria massa de testes\n        expect(res.body.data.title).to.equal(tasks[0].title);\n        done();\n    });\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "diff": null
                  },
                  "uuid": "7c4a62eb-751b-4167-be2d-c4e0be63b81a",
                  "parentUUID": "872b6b91-c09c-42eb-834e-361178033e4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7c4a62eb-751b-4167-be2d-c4e0be63b81a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2001,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65a4e0ee-b2ea-421e-9ff5-a3ffd3473fc1",
              "title": "quando o id não existe",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js",
              "file": "\\test\\get.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar erro 404 - not found ",
                  "fullTitle": "get quando o id não existe deve retornar erro 404 - not found ",
                  "timedOut": true,
                  "duration": 2001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var id = require('mongoose').Types.ObjectId();\nrequest.get('/task/' + id).end(function (err, res) {\n    expect(res).to.has.status(404);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\get.spec.js)",
                    "diff": null
                  },
                  "uuid": "7a02bd52-a662-4c21-b775-9308e9b23d7d",
                  "parentUUID": "65a4e0ee-b2ea-421e-9ff5-a3ffd3473fc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7a02bd52-a662-4c21-b775-9308e9b23d7d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2001,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "afdec931-cda1-4c4f-8dcb-278a6a092e12",
          "title": "post",
          "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js",
          "file": "\\test\\post.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "73c918ab-89f0-45d0-9032-b2c582001d9c",
              "title": "quando eu cadastro uma tarefa",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js",
              "file": "\\test\\post.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook for \"deve retornar 200 - cadastro com sucesso\"",
                  "fullTitle": "post quando eu cadastro uma tarefa \"before all\" hook for \"deve retornar 200 - cadastro com sucesso\"",
                  "timedOut": true,
                  "duration": 2001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "rabbit.delete('/api/queues/%2F/tasksdev/contents').auth('guest', 'guest').end(function (err, res) {\n    expect(res).to.has.status(204);\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js)",
                    "diff": null
                  },
                  "uuid": "db6a087d-abeb-4893-856f-e8d26645118a",
                  "parentUUID": "73c918ab-89f0-45d0-9032-b2c582001d9c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 200 - cadastro com sucesso",
                  "fullTitle": "post quando eu cadastro uma tarefa deve retornar 200 - cadastro com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(200);\n    expect(res.body.data.title).to.be.an('string');\n    expect(res.body.data.owner).to.be.an('string');\n    expect(res.body.data.done).to.be.an('boolean');\n    done();\n});",
                  "err": {},
                  "uuid": "664530de-783e-4f45-b719-8f0f3b104822",
                  "parentUUID": "73c918ab-89f0-45d0-9032-b2c582001d9c",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "e deve enviar um email",
                  "fullTitle": "post quando eu cadastro uma tarefa e deve enviar um email",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var payload = { vhost: '/', name: 'tasksdev', truncate: '50000', ackmode: 'ack_requeue_true', encoding: 'auto', count: '1' };\n            rabbit.post('/api/queues/%2F/tasksdev/get').auth('guest', 'guest').send(payload).end(function (err, res) {\n                expect(res).to.has.status(200);\n                expect(res.body[0].payload).to.contain('Tarefa ' + task.title + ' criada com sucesso!');\n                done();\n            });",
                  "err": {},
                  "uuid": "c1378ed8-5479-4c92-8061-87e0c2ed2b64",
                  "parentUUID": "73c918ab-89f0-45d0-9032-b2c582001d9c",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "664530de-783e-4f45-b719-8f0f3b104822",
                "c1378ed8-5479-4c92-8061-87e0c2ed2b64"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55268513-c19b-4f6d-b864-781e7fb4be01",
              "title": "quando não informo o titulo",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js",
              "file": "\\test\\post.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 400 - Not Found",
                  "fullTitle": "post quando não informo o titulo deve retornar 400 - Not Found",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(400);\n    expect(res.body.errors.title.message).to.eql('Título é obrigatório!');\n    done();\n});",
                  "err": {},
                  "uuid": "11c837d8-8f0c-48f2-92cd-2725942f3741",
                  "parentUUID": "55268513-c19b-4f6d-b864-781e7fb4be01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11c837d8-8f0c-48f2-92cd-2725942f3741"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41a7f243-eef8-4f85-a297-1b38a046b4ce",
              "title": "quando não informo o owner",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js",
              "file": "\\test\\post.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 400 - Bad Request",
                  "fullTitle": "post quando não informo o owner deve retornar 400 - Bad Request",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(400);\n    expect(res.body.errors.owner.message).to.eql('Dono da tarefa é obrigatório!');\n    done();\n});",
                  "err": {},
                  "uuid": "0f52e59f-0573-4e5f-847d-f67d1f8d8094",
                  "parentUUID": "41a7f243-eef8-4f85-a297-1b38a046b4ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f52e59f-0573-4e5f-847d-f67d1f8d8094"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4a69a40-6ad2-4cfa-a88f-2ad79488b515",
              "title": "quando a tarefa já existe",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\post.spec.js",
              "file": "\\test\\post.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook for \"deve retornar 409 - Chave Duplicada\"",
                  "fullTitle": "post quando a tarefa já existe \"before all\" hook for \"deve retornar 409 - Chave Duplicada\"",
                  "timedOut": false,
                  "duration": 589,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(200);\n    done();\n});",
                  "err": {
                    "message": "TypeError: Cannot use 'in' operator to search for 'status' in undefined",
                    "estack": "TypeError: Cannot use 'in' operator to search for 'status' in undefined\n    at Proxy.<anonymous> (node_modules\\chai-http\\lib\\http.js:80:38)\n    at Proxy.methodWrapper (node_modules\\chai\\lib\\chai\\utils\\addMethod.js:57:25)\n    at C:/Users/luan.linares/Documents/Projetos/automacao_api_js/node/treko/api/test/post.spec.js:25:40\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:387:9)\n    at emitErrorNT (internal/streams/destroy.js:66:8)\n    at _combinedTickCallback (internal/process/next_tick.js:139:11)\n    at process._tickCallback (internal/process/next_tick.js:181:9)",
                    "diff": null
                  },
                  "uuid": "1d9011d5-1af2-4d87-ab8d-1df85c1b44b4",
                  "parentUUID": "f4a69a40-6ad2-4cfa-a88f-2ad79488b515",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 409 - Chave Duplicada",
                  "fullTitle": "post quando a tarefa já existe deve retornar 409 - Chave Duplicada",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(409);\n    expect(res.body.errmsg).to.include('duplicate key');\n    done();\n});",
                  "err": {},
                  "uuid": "bbb94c31-975e-4e37-9651-266ca84384e7",
                  "parentUUID": "f4a69a40-6ad2-4cfa-a88f-2ad79488b515",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "bbb94c31-975e-4e37-9651-266ca84384e7"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e201ed5-0c97-4fcb-9c04-5e3ddc40d46a",
          "title": "put",
          "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\put.spec.js",
          "file": "\\test\\put.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57f2a773-0d61-4ead-8e82-997fdc4a9050",
              "title": "quando eu altero uma tarefa",
              "fullFile": "C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\put.spec.js",
              "file": "\\test\\put.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "put quando eu altero uma tarefa \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_task2.default.insertMany([task]);\ndone();",
                  "err": {},
                  "uuid": "f4e07ccd-ea99-48da-8fc3-8cf07d674199",
                  "parentUUID": "57f2a773-0d61-4ead-8e82-997fdc4a9050",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 200",
                  "fullTitle": "put quando eu altero uma tarefa deve retornar 200",
                  "timedOut": true,
                  "duration": 2001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "task.title = 'Lavar Roupas', task.done = true;\nrequest.put('/task/' + task._id).send(task).end(function (err, res) {\n    expect(res).to.has.status(200);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\put.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\put.spec.js)",
                    "diff": null
                  },
                  "uuid": "7429c09c-4144-41fa-99ae-e7c741bf8df5",
                  "parentUUID": "57f2a773-0d61-4ead-8e82-997fdc4a9050",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar os dados atualizados",
                  "fullTitle": "put quando eu altero uma tarefa deve retornar os dados atualizados",
                  "timedOut": true,
                  "duration": 1999,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task/' + task._id).end(function (err, res) {\n    expect(res).to.have.status(200);\n    expect(res.body.data.title).to.eql(task.title);\n    expect(res.body.data.done).to.be.true;\n    done();\n});",
                  "err": {
                    "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\put.spec.js)",
                    "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\luan.linares\\Documents\\Projetos\\automacao_api_js\\node\\treko\\api\\test\\put.spec.js)",
                    "diff": null
                  },
                  "uuid": "9d664689-335e-45e3-88e7-b2992df2cc1b",
                  "parentUUID": "57f2a773-0d61-4ead-8e82-997fdc4a9050",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7429c09c-4144-41fa-99ae-e7c741bf8df5",
                "9d664689-335e-45e3-88e7-b2992df2cc1b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4000,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.0"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}